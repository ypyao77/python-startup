#!/usr/bin/env python3


# 7.5 定义有默认参数的函数

# 你想定义一个函数或者方法，它的一个或多个参数是可选的并且有一个默认值
def spam1(a, b=42):
    print("a, b: ", a, b)

# 如果默认参数是一个可修改的容器比如一个列表、集合或者字典，可以使用 None作为默认值
def spam2(a, b=None):
    if b is None:
        b = []
    print("a, b: ", a, b)

# 如果你并不想提供一个默认值，而是想仅仅测试下某个默认参数是不是有传递进来
_no_value = object()
def spam3(a, b=_no_value):
    if b is _no_value:
        print('No b value supplied')
    print("a, b: ", a, b)


if __name__ == "__main__":
    spam1(1)
    spam1(1, 2)

    spam2(1)
    spam2(1, [])
    spam2(1, [2, 3])

    spam3(1)
    spam3(1, [])
    spam3(1, [2, 3])

    # 1, 默认参数的值仅仅在函数定义的时候赋值一次
    x = 42
    def spam(a, b=x):
        print("a, b: ", a, b)

    spam(1)
    # 注意到当我们改变 x 的值的时候对默认参数值并没有影响，这是因为在函数定义的时候就已经确定了它的默认值了
    x = 23
    spam(1)

    # 默认参数的值应该是不可变的对象，比如 None、 True、 False、数字或字符串。特别的，千万不要像下面这样写代码
    def spam(a, b=[]):
        print(b)
        return b

    x = spam(1)
    print("x: ", x)
    x.append(99)
    x.append('Yow!')
    print("x: ", x)
    spam(1)


    # 最后一个问题比较微妙，那就是一个函数需要测试某个可选参数是否被使用者传递进来。
    # 这时候需要小心的是你不能用某个默认值比如 None、 0 或者 False 值来测试用户提供的值
    # (因为这些值都是合法的值，是可能被用户传递进来的)。因此，你需要其他的解决方案了

    # 为了解决这个问题，你可以创建一个独一无二的私有对象实例，就像上面的_no_value 变量那样。
    # 在函数里面，你可以通过检查被传递参数值跟这个实例是否一样来判断。这里的思路是用户不可能去传递这个 _no_value 实例作为输入。
    # 因此，这里通过检查这个值就能确定某个参数是否被传递进来了。

    # 这里对 object() 的使用看上去有点不太常见。 object 是 python 中所有类的基类。
    # 你可以创建 object 类的实例，但是这些实例没什么实际用处，因为它并没有任何有用的方法，
    # 也没有任何实例数据 (因为它没有任何的实例字典，你甚至都不能设置任何属性值)。
    # 你唯一能做的就是测试同一性。是需要一个同一性的测试而已
